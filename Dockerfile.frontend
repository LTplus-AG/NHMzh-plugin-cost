# Stage 1: Development
FROM node:20-alpine as dev

WORKDIR /app

# Copy package files to leverage Docker cache for dependencies
COPY package.json package-lock.json ./

# Install dependencies using npm ci for faster, consistent installs from lock file
RUN npm ci

# Copy the rest of the application AFTER dependencies are installed
COPY . .

# Expose the development port
EXPOSE 4004

# Start the development server
CMD ["npm", "run", "dev", "--", "--host", "--port", "4004"]

# Stage 2: Build
FROM node:20-alpine as build

WORKDIR /app

# Copy package files
COPY package.json package-lock.json ./

# Install dependencies
RUN npm ci

# Copy the rest of the application
COPY . .

# Build the application
RUN npm run build

# Stage 3: Production
FROM nginx:alpine as prod

# Copy the build files from the build stage
COPY --from=build /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose the port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"] 